import os

def alignment_path():
    '''
    returns a dict containing the shell-ready versions of the paths for 
    ref genome :: alignment_path['ref']
    genome annotation :: alignment_path['annot']
    tool-annotation-specific index genome :: alignment_path['idx']
    '''
    # path is the dict to be returned
    path = {};
    # make convenience variable alignment
    alignment = config['alignment']
    ref_gen = alignment['refgen'].upper()
    # convert HGxxGENCODE/ENSEMBLEyy to HG..GC/ENyy
    annotation = alignment['annotation'].upper().replace('GENCODE', 'GC').replace('ENSEMBLE', 'EN')
    idx_path = ref_gen + alignment
    # make genome_index path from $GENIDX and config:alignment:tool  
    idx_path = os.path.join(os.environ['GENIDX'], alignment['tool'])
    idx_path = f'{idx_path}/{idx_path.lower()}'
    # add path if not existing
    if not os.path.isdir(idx_path):
        os.makedirs(idx_path)
    # load dict with paths
    path['ref'] = os.environ[ref_gen]
    path['annot'] = os.environ[annotation]
    path['idx'] = idx_path
    return path

alignment_path = alignment_path()

def get_star_genomeGenerate_options():
    overhang = config['setup']['readlength'] - 1
    threads = config['alignment']['threads']
    options = " --runMode genomeGenerate"
    options += f" --genomeDir {alignment_path['idx']}"
    options += f" --genomeFastaFiles {alignment_path['ref']}"
    options += f" --sjdbGTFfile {alignment_path['annot']}"
    options += f" --sjdbOverhang {overhang}"
    options += f" --runThreadN {threads}"
    return options


rule make_ref_genome: 
    # --> automatize gen_ref.done file creating ...f"{alignment_path['idx']}gen_ref.done"
    output: touch("/fast/users/szyskam_c/static/ref/annotation/hg38gc28/gen_ref.done")
    threads: config['alignment']['threads']
    params: get_star_genomeGenerate_options()
    message: "Genome indexed by STAR"
    run:
        shell(f'STAR {params}')
    # shell:
    #     """
    # # generate genome index
    #     STAR --runMode genomeGenerate \
    #         --genomeDir {params.ref} \
    #         --genomeFastaFiles {params.fa} \
    #         --sjdbGTFfile {params.gtf}\
    #         --sjdbOverhang 74 \
    #         --runThreadN {threads} \
    #     """


def get_star_options(wildcards):
    threads = config['alignment']['threads']
    options = f"--genomeDir {alignment_path['idx']}"
    options += " --readFilesIn $FILES"
    options += f' --outFileNamePrefix alignment_star/GM{wildcards.sample}-'
    options += f" --outFilterMultimapNmax 1"
    options += f" --outReadsUnmapped Fastx"
    if config['setup']['fastq_comp'] == 'gz':
        options += " --readFilesCommand gzip -c"
    elif config['setup']['fastq_comp'] == 'bz2':
        options += " --readFilesCommand bunzip2 -c"
    options += f" --outSAMtype BAM SortedByCoordinate"
    options += " --twopassMode Basic"
    options += f" --runThreadN {threads}"    
    return options


rule align_fastq:
    input:  expand("fastq_trim/GM{{sample}}-{read}_trim.fastq", read=[1,2]),
            "/fast/users/szyskam_c/static/ref/annotation/hg38gc28/gen_ref.done"
    output: "alignment_star/GM{sample}-Aligned.sortedByCoord.out.bam"
    params: get_star_options
    threads: config['alignment']['threads']
    shell:
        """
        FILES=`ls -l fastq_trim | awk '/GM{wildcards.sample}-.*trim.fastq$/ {{ printf("fastq_trim/%s ", $9)}}'`
        STAR {params}
        """

rule make_indexed_bam:
    input: "alignment_star/GM{sample}-Aligned.sortedByCoord.out.bam"
    threads: config['alignment']['threads']
    output: "alignment_star/GM{sample}-Aligned.sortedByCoord.out.bam.bai"
    shell: "samtools index {input}"
